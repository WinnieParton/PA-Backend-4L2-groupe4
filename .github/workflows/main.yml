name: CI/CD pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches: [main]

env:
  DOCKER_USERNAME: winniemonel
  POSTGRES_PORT: 5432
  POSTGRES_HOST: localhost
  POSTGRES_USER: winniemonel
  POSTGRES_PASSWORD: secret
  POSTGRES_DB: projetannuel
  POSTGRES_DB_CHARSET: utf8
  SPRING_JPA_HIBERNATE_DDL_AUTO: update

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          SPRING_JPA_HIBERNATE_DDL_AUTO: ${{ env.SPRING_JPA_HIBERNATE_DDL_AUTO }}
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 19
        uses: actions/setup-java@v2
        with:
          distribution: "temurin"
          java-version: "19"
          overwrite-settings: false
      - name: Run Clean And Install
        run: mvn clean install

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: SSH into EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # Replace with the actual EC2 instance host/IP
          username: ${{ secrets.EC2_USERNAME }} # Replace with the actual SSH username
          key: ${{ secrets.EC2_PRIVATE_KEY }} # Replace with the actual private key value

          # Define the commands to execute on the EC2 instance
          script: |
            cd /home/ubuntu/pa-backend  # Replace with the actual path to your project directory
            git pull origin main  # Pull the latest changes from the main branch using the SSH protocol
            sudo /opt/apache-maven-3.9.3/bin/mvn clean install  # Build the project using Maven
    
           sudo chown ubuntu:ubuntu -R target/
           
            sudo systemctl stop pa.service  # Stop the existing Spring Boot application service
            
            sudo systemctl start pa.service  # Start the Spring Boot application service
 
